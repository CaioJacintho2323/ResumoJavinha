
package com.caiojacintho.javacore.concorrencia.test;

import com.caiojacintho.javacore.concorrencia.dominio.Quote;
import com.caiojacintho.javacore.concorrencia.service.StoreService;
import com.caiojacintho.javacore.concorrencia.service.StoreServiceDeprecated;
import com.caiojacintho.javacore.concorrencia.service.StoreServiceWithDiscount;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;

public class CompletableFutureTest04 {
    public static void main(String[] args) {
        StoreServiceWithDiscount storeServiceWithDiscount = new StoreServiceWithDiscount();
        searchPricesWithDiscountAsync(storeServiceWithDiscount);

    }

    private static void searchPricesWithDiscount(StoreServiceWithDiscount storeServiceWithDiscount) {
        long startTime = System.currentTimeMillis();
        List<String> stores = List.of("Store 1", "Store 2", "Store 3", "Store 4");
//        stores.forEach(s -> System.out.println(storeServiceWithDiscount.getPriceSync(s)));
        stores.stream()
                .map(storeServiceWithDiscount::getPriceSync)
                .map(Quote::newQuote)
                .map(storeServiceWithDiscount::applyDiscount)
                .forEach(System.out::println);
        long endTime = System.currentTimeMillis();
        System.out.printf("Tempo passado %d%n", (endTime - startTime));

    }

    private static void searchPricesWithDiscountAsync(StoreServiceWithDiscount storeServiceWithDiscount) {
        long startTime = System.currentTimeMillis();
        List<String> stores = List.of("Store 1", "Store 2", "Store 3", "Store 4");
//        stores.forEach(s -> System.out.println(storeServiceWithDiscount.getPriceSync(s)));
        List<CompletableFuture<String>> collect = stores.stream()
                //Getting the price async storeName:price:discountCode
                .map(s -> CompletableFuture.supplyAsync(() -> storeServiceWithDiscount.getPriceSync(s)))
                //Instantiating a new quote from the string generated by getPriceSync
                .map(cf -> cf.thenApply(Quote::newQuote))
                //Composing the first completable future
                .map(cf -> cf.thenCompose(quote -> CompletableFuture.supplyAsync(() -> storeServiceWithDiscount.applyDiscount(quote))))
                .collect(Collectors.toList());

        collect.stream().map(CompletableFuture::join).forEach(System.out::println);

        long endTime = System.currentTimeMillis();
        System.out.printf("Tempo passado %d%n", (endTime - startTime));


    }
}
